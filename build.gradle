import org.gradle.internal.jvm.Jvm

plugins {
    id 'java-library'
    id 'c'
    id 'maven-publish'
    id 'com.github.simkuenzi.readme' version '0.1'
}

group "cloud.unum.ustore"
version = file("VERSION").text.trim()

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

readme {
    readmeFile = file("java/README.md")
    overwrite = true
}

sourceSets {
    main {
        java {
            srcDir "java/"
            exclude "test/"
        }
    }
    test {
        java {
            srcDir "java/test"
        }
    }
}

dependencies {
    testImplementation('junit:junit:4.13.2')
}

model {
    buildTypes{
        ucset
        rocksdb
        leveldb
    }

    components {
        ustore(NativeLibrarySpec) {
            sources {
                c {
                    source {
                        srcDirs "java/cloud/unum/ustore"
                        include "**/*.c"
                    }
                    exportedHeaders {
                        srcDirs "include", "${Jvm.current().javaHome}/include"
                    }
                }
            }
            binaries.withType(StaticLibraryBinarySpec) {
                buildable = false
            }
            binaries.withType(SharedLibraryBinarySpec) {
                if (targetPlatform.operatingSystem.linux) {
                    cCompiler.args '-I', "${Jvm.current().javaHome}/include/linux"
                    cCompiler.args '-D_FILE_OFFSET_BITS=64'
                }

                if (buildType == buildTypes.ucset) {
                    linker.args '-L', "${projectDir}/build/lib", "-l", "ustore_ucset_bundle", "-l", "c"
                } else if (buildType == buildTypes.rocksdb) {
                    linker.args '-L', "${projectDir}/build/lib", "-l", "ustore_rocksdb_bundle", "-l", "c"
                } else if (buildType == buildTypes.leveldb) {
                    linker.args '-L', "${projectDir}/build/lib", "-l", "ustore_leveldb_bundle", "-l", "c"
                }
            }
        }
    }
}

test {
    forkEvery 1

    dependsOn jar

    // Rearrange test classpath, add compiled JAR instead of main classes
    classpath = project.sourceSets.test.output + configurations.testRuntimeClasspath + files(jar.archiveFile)
}

jar {
    dependsOn("ustoreUcsetSharedLibrary")
    dependsOn("ustoreRocksdbSharedLibrary")
    dependsOn("ustoreLeveldbSharedLibrary")

    into("ucset") {
        from("$buildDir/libs/ustore/shared/ucset/libustore.so")
    }

    into("rocksdb") {
        from("$buildDir/libs/ustore/shared/rocksdb/libustore.so")
    }

    into("leveldb") {
        from("$buildDir/libs/ustore/shared/leveldb/libustore.so")
    }
}

task copyReadme(type: Copy) {
    from "$projectDir/java"
    include 'README.md'
    into "$buildDir/resources/main"
}

publishing {
    publications {
        library(MavenPublication) {
            from components.java
            artifact tasks.copyReadme
            pom {
                name = "UStore"
                description = "Universal Key-Value store interface for both in-memory and persistent transactional collections for Java"
                url = "https://github.com/gurgenyegoryan/ustore"
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
            }
        }
    }

    repositories {
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/gurgenyegoryan/ustore"
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}

    // Publishing to GitHub is much easier ;)
    // repositories {
    //     maven {
    //         name = "OSSRH"
    //         url = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
    //         credentials {
    //             username = System.getenv("MAVEN_USERNAME")
    //             password = System.getenv("MAVEN_PASSWORD")
    //         }
    //     }
    // }
